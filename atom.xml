<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Skeptical Coder</title>
  <subtitle>Javascript and shenanigans</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://skeptical-coder.js.org/"/>
  <updated>2017-08-13T05:23:34.000Z</updated>
  <id>http://skeptical-coder.js.org/</id>
  
  <author>
    <name>Rafael Pinheiro</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Understanding objects in javascript</title>
    <link href="http://skeptical-coder.js.org/2017/08/06/Understanding-objects-in-javascript/"/>
    <id>http://skeptical-coder.js.org/2017/08/06/Understanding-objects-in-javascript/</id>
    <published>2017-08-06T16:23:58.000Z</published>
    <updated>2017-08-13T05:23:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>I wrote this post for those who are already familiar with object-oriented programming, and the intention is to explain language-especific implementations.</p>
<img src="/2017/08/06/Understanding-objects-in-javascript/main.png" alt="[ES6 classical syntax-sugar vs Prototype]" title="[ES6 classical syntax-sugar vs Prototype]">
<p>Javascript deals with objects in a very loose way, and the more time you spend working with it, more quirks you will find that you will need to get used to. What confuses most developers is how inheritance works, it’s very different than most languages.<br>ES6 introduced a more classical approach to inheritance and will probably be easier to understand if you are struggling.<br>I will show you the newly available classical approach and the regular way of doing it in javascript, then a few other things you should know about objects.<br><a id="more"></a></p>
<h2 id="ES6-classical-syntax-sugar"><a href="#ES6-classical-syntax-sugar" class="headerlink" title="ES6 classical syntax-sugar"></a>ES6 classical syntax-sugar</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(type = 'Animal') &#123;</div><div class="line">    <span class="keyword">this</span>.type = type;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  printType() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.type);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">super</span>(<span class="string">'Cat'</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  meow() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'meow'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> animal = <span class="keyword">new</span> Animal();</div><div class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> Cat();</div><div class="line"></div><div class="line">animal.printType();</div><div class="line"><span class="comment">// "Animal"</span></div><div class="line"></div><div class="line">cat.printType();</div><div class="line"><span class="comment">// "Cat"</span></div><div class="line"></div><div class="line">cat.meow();</div><div class="line"><span class="comment">// "meow"</span></div><div class="line"></div><div class="line">animal.meow();</div><div class="line"><span class="comment">// TypeError: animal.meow is not a function</span></div></pre></td></tr></table></figure>
<p>It’s pretty straight forward if you are used to a classic inheritance model. The ‘class’ keyword is used to define a class that we can create new instances from. The ‘extends’ keyword is used to define inheritances, a way to use the previous class and add or modify stuff while keeping the original class untouched. The ‘new’ keyword is used to create a new instance of a class.<br>In most classic inheritance languages the instance is an object, and the class is something different, it’s just a blueprint for the instances. Javascript doesn’t really have the concept of a class in that sense. The ‘class’ keyword here will actually be creating a function with a prototype, and that’s why I said it’s a syntax-sugar.</p>
<h2 id="Prototype-way"><a href="#Prototype-way" class="headerlink" title="Prototype way"></a>Prototype way</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">type</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.type = type || <span class="string">'Animal'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Animal.prototype.printType = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.type);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">type</span>) </span>&#123;</div><div class="line">  Animal.call(<span class="keyword">this</span>, <span class="string">'Cat'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Cat.prototype = <span class="built_in">Object</span>.create(Animal.prototype);</div><div class="line"></div><div class="line">Cat.prototype.meow = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'meow'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> animal = <span class="keyword">new</span> Animal();</div><div class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> Cat();</div><div class="line"></div><div class="line">animal.printType();</div><div class="line"><span class="comment">// 'Animal'</span></div><div class="line"></div><div class="line">cat.printType();</div><div class="line"><span class="comment">// 'Cat'</span></div><div class="line"></div><div class="line">cat.meow();</div><div class="line"><span class="comment">// 'meow'</span></div><div class="line"></div><div class="line">animal.meow();</div><div class="line"><span class="comment">// Error TODO</span></div></pre></td></tr></table></figure>
<p>Javascript uses a prototypal inheritance method, so instead of using a ‘class’, it uses a ‘prototype’ property attached to a function. The ‘new’ keyword creates a new object using as blueprint the function’s prototype and using the function it self as the constructor.<br>A few things might look weird here if you are used to a more classic approach:</p>
<ul>
<li>A function can use the ‘this’ keyword to read and write properties onto itself, just like an object would. And that is because functions are objects too, in fact they are an instance of the ‘Function’ object;</li>
<li>Instead of the ‘super’ keyword, we use a ‘call’ method present on the function to execute the parent constructor. The first argument will be the instance it will modify, we use the ‘this’ keyword to pass the current function and all the next arguments will be just regular arguments you would pass to the parent function;</li>
<li>You can assign a function to a property or variable, actually you can even pass it around as a function’s argument. This is because javascript treats function as a first class citizen, meaning that functions are handled like a string, a number or an object. This is pretty straight-forward in javascript because functions are already objects anyway;</li>
<li>Also, you don’t need to name your functions. You can just create an anonymous function and assign it to a variable or do whatever you would do to an object.<br>Besides inheritance there a few other things you could do to objects in javascript.</li>
</ul>
<h2 id="Literal-object"><a href="#Literal-object" class="headerlink" title="Literal object"></a>Literal object</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> cat = &#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'Cat'</span>,</div><div class="line">  <span class="attr">meow</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'meow'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>You can just create an object without a blueprint if you want. The syntax is pretty simple, not much explaining to do.<br>If you got ES6 enabled you can write the function in a cleaner way.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> cat = &#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'Cat'</span>,</div><div class="line">  meow() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'meow'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Self-constructing-object"><a href="#Self-constructing-object" class="headerlink" title="Self-constructing object"></a>Self-constructing object</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Cat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.type = <span class="string">'Cat'</span>;</div><div class="line">  <span class="keyword">this</span>.meow = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'meow'</span>);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">privateMethod</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// Does some private stuff</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> cat = Cat();</div></pre></td></tr></table></figure>
<p>Using the fact that functions are objects we can use the function itself as a constructor and blueprint. Each function call will actually create a new instance.<br>Since the body of a function is a separate scope, the ‘privateMethod’ function will not be acessible outside of the main function. Everything attached to ‘this’ will be public.</p>
<h2 id="Reveal-pattern"><a href="#Reveal-pattern" class="headerlink" title="Reveal pattern"></a>Reveal pattern</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> cat = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">meow</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'meow'</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">privateMethod</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// Does some private stuff</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'Cat'</span>,</div><div class="line">    <span class="attr">meow</span>: meow,</div><div class="line">  &#125;;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>Pretty similar to the previous one, but by creating a new literal object instead of using the function itself we will end up with a cleaner object.<br>Instead of defining and saving the blueprint in a variable ‘Cat’, I just created an imediately-invoked function expression (IIFE for short). You can do that by adding ‘()’ after the function body. It just means that you will execute that function right after it was created.</p>
<h2 id="Module-Revealing-Pattern"><a href="#Module-Revealing-Pattern" class="headerlink" title="Module Revealing Pattern"></a>Module Revealing Pattern</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Animals = &#123;&#125;;</div><div class="line"></div><div class="line">Animals.cat = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">meow</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'meow'</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">privateMethod</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// Does some private stuff</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'Cat'</span>,</div><div class="line">    <span class="attr">meow</span>: meow,</div><div class="line">  &#125;;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line">Animals.dog = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">woof</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'woof'</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">privateMethod</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// Does some private stuff</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'Dog'</span>,</div><div class="line">    <span class="attr">woof</span>: woof,</div><div class="line">  &#125;;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>This pattern builds up on the previous one.<br>We are just gathering the objects on a centralyzing literal object. On this example I already created a standalone cat object, but you could create a function or prototype blueprint and reveal that so you can create as many instances as you want.<br>This pattern is losing some relevance as ES6 becomes more popular because of the import and export features that were added enabling a module per file.<br>It is especially useful if your are using an ES5 envorinment where every variable created outside of a function (or even inside if you don’t use ‘var’ or ‘const’), is global to the whole project and to every other script that will be loaded, third-part or not.<br>This way you can build a big project without poluting the global escope, you could just create an ‘app’ object and use this pattern to populate it with a deep tree-like structure composed by modules.</p>
<p>Those are, I believe, the most important aspects of dealing with objects in javascript.<br>Still find something hard to understand?<br>Did I miss anything important?<br>Comments are below!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I wrote this post for those who are already familiar with object-oriented programming, and the intention is to explain language-especific implementations.&lt;/p&gt;
&lt;img src=&quot;/2017/08/06/Understanding-objects-in-javascript/main.png&quot; alt=&quot;[ES6 classical syntax-sugar vs Prototype]&quot; title=&quot;[ES6 classical syntax-sugar vs Prototype]&quot;&gt;
&lt;p&gt;Javascript deals with objects in a very loose way, and the more time you spend working with it, more quirks you will find that you will need to get used to. What confuses most developers is how inheritance works, it’s very different than most languages.&lt;br&gt;ES6 introduced a more classical approach to inheritance and will probably be easier to understand if you are struggling.&lt;br&gt;I will show you the newly available classical approach and the regular way of doing it in javascript, then a few other things you should know about objects.&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://skeptical-coder.js.org/tags/javascript/"/>
    
      <category term="object-oriented" scheme="http://skeptical-coder.js.org/tags/object-oriented/"/>
    
      <category term="prototype" scheme="http://skeptical-coder.js.org/tags/prototype/"/>
    
      <category term="ES6" scheme="http://skeptical-coder.js.org/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Review your code</title>
    <link href="http://skeptical-coder.js.org/2016/04/08/Review-your-code/"/>
    <id>http://skeptical-coder.js.org/2016/04/08/Review-your-code/</id>
    <published>2016-04-08T16:37:33.000Z</published>
    <updated>2017-08-13T05:22:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>As I finish writing this post, I will review it to check if I can structure it better or if I need to improve the way I am explaining my ideas, and of course for typos and mistakes. This should be the way you write code as well. You are not done when your code works, you are done when your code looks nice.<br><img src="/2016/04/08/Review-your-code/code-review.gif" alt="[Code review]" title="[Code review]"></p>
<p>How many characters in length do you let your lines go? How well do you organise your code? Is your code open to future demands in features or will the team have to rewrite most of it from scratch? Take some pride on how your code looks.</p>
<p>Other people will see it and you might need to work on it again. When coming back to fix a bug you are not in the same mindset you were when first spending hours or days working on that feature. Review your code to leave it for the future you, so you can read it easily enough.</p>
<p>By spending some extra time reviewing what you did when your focus was to develop the logic of how things would work and taking care of bugs, you can focus on other important stuff. Did you miss a situation where a bug might show up later? Is your code good enough in case you need to extend it later?<br><a id="more"></a></p>
<p>I will try to bring it to a more practical scenario and review a real piece of code that I wrote. I like to keep my ajax calls to the server centralized, so in future when I need to change something on how the calls are made I have it all in one place, and not lost somewhere in the code.</p>
<p>There is a file called “api.js” in a project I am working on, if it grows too much I will split it into multiple files inside an “api” folder. But for now let’s just review it and check if we can make it better.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> BASE = <span class="string">'http://localhost:8000/api/v1'</span>;</div><div class="line"><span class="keyword">const</span> postOptions = &#123;</div><div class="line">  <span class="attr">method</span>  : <span class="string">'POST'</span>,</div><div class="line">  <span class="attr">headers</span> : &#123; <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span> &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> todos = &#123;</div><div class="line">  <span class="attr">list</span>: <span class="keyword">async</span> () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(BASE + <span class="string">'/todos'</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (response.status !== <span class="number">200</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> response;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> response.json();</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">create</span>: <span class="keyword">async</span> (payload) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(BASE + <span class="string">'/todos'</span>, &#123;</div><div class="line">      ...postOptions,</div><div class="line">      <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(payload)</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (response.status !== <span class="number">200</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> response;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> response.json();</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> auth = &#123;</div><div class="line">  <span class="attr">login</span>: <span class="keyword">async</span> (payload) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(BASE + <span class="string">'/auth/login'</span>, &#123;</div><div class="line">      ...postOptions,</div><div class="line">      <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(payload)</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (response.status !== <span class="number">200</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> response;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> response.json();</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>You can see there that I keep the base url for the server on a string and some default options for when making a post call. I am <a href="https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/export" target="_blank" rel="external">exporting</a> some objects that handles the calls separated by domains and uses the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="external">fetch API</a>. Also some <a href="https://jakearchibald.com/2014/es7-async-functions/" target="_blank" rel="external">async magic</a> there and using the <a href="https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Spread_operator" target="_blank" rel="external">spread operator</a> to create new objects extending existing ones.</p>
<p>Let’s take it one improvement at a time. First let’s move what belongs into a configuration file to it’s place. Luckily I already have a config file set up.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'./config'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> BASE = config.apiUrl;</div><div class="line"><span class="keyword">const</span> postOptions = &#123;</div><div class="line">  <span class="attr">method</span>  : <span class="string">'POST'</span>,</div><div class="line">  <span class="attr">headers</span> : &#123; <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span> &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> todos = &#123;</div><div class="line">  <span class="attr">list</span>: <span class="keyword">async</span> () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(BASE + <span class="string">'/todos'</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (response.status !== <span class="number">200</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> response;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> response.json();</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">create</span>: <span class="keyword">async</span> (payload) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(BASE + <span class="string">'/todos'</span>, &#123;</div><div class="line">      ...postOptions,</div><div class="line">      <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(payload)</div><div class="line">    <span class="keyword">if</span> (response.status !== <span class="number">200</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> response;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> response.json();</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> auth = &#123;</div><div class="line">  <span class="attr">login</span>: <span class="keyword">async</span> (payload) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(BASE + <span class="string">'/auth/login'</span>, &#123;</div><div class="line">      ...postOptions,</div><div class="line">      <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(payload)</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (response.status !== <span class="number">200</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> response;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> response.json();</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>The API url is now being fetched from the configuration. But I am still calling fetch on a lot of places there, and when different api calls are necessary we will have even more fetch calls. That is not good, the same reasoning that makes me wanna keep all my ajax call on the same place makes me wanna avoid multiple calls to the same api (the fetch API in this case). If I ever need to update the way I am making this call I will have multiple ones, so let’s make it a single one and reuse that.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'./config'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> BASE = config.apiUrl;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">path</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">async</span> () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(BASE + path);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (response.status !== <span class="number">200</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> response;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> response.json();</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">path</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">async</span> (payload) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(BASE + path, &#123;</div><div class="line">      <span class="attr">method</span>  : <span class="string">'POST'</span>,</div><div class="line">      <span class="attr">headers</span> : &#123; <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span> &#125;,</div><div class="line">      <span class="attr">body</span>    : <span class="built_in">JSON</span>.stringify(payload)</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (response.status !== <span class="number">200</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> response;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> response.json();</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> todos = &#123;</div><div class="line">  <span class="attr">list</span>: get(<span class="string">'/todos'</span>),</div><div class="line">  <span class="attr">create</span>: post(<span class="string">'/todos'</span>)</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> auth = &#123;</div><div class="line">  <span class="attr">login</span>: post(<span class="string">'/auth/login'</span>)</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>I used <a href="http://www.sitepoint.com/currying-in-functional-javascript/" target="_blank" rel="external">currying</a> and <a href="https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="external">arrow functions</a> to create functions that handles get and post calls to the api. Now we need to write much less code when creating a new call, and if I ever need to change the calls to add a dynamic variable such as api version or keys to the calls I just need to do that in the new get and post functions instead of fixing lots of repeated code.</p>
<p>But we still have a lot of code there that we have to get past when reading the file later and that will require low to zero maintenance, so we can move that somewhere else and transform this file into route declarations for api. I will create an API handling class in my lib folder.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Api</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span> (baseUrl) &#123;</div><div class="line">    <span class="keyword">this</span>.baseUrl = baseUrl;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  get(path) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">async</span> () =&gt; &#123;</div><div class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(<span class="keyword">this</span>.baseUrl + path);</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (response.status !== <span class="number">200</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> response;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> response.json();</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  post(path) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">async</span> (payload) =&gt; &#123;</div><div class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(<span class="keyword">this</span>.baseUrl + path, &#123;</div><div class="line">        <span class="attr">method</span>  : <span class="string">'POST'</span>,</div><div class="line">        <span class="attr">headers</span> : &#123; <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span> &#125;,</div><div class="line">        <span class="attr">body</span>    : <span class="built_in">JSON</span>.stringify(payload)</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (response.status !== <span class="number">200</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> response;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> response.json();</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Now we can even handle multiple APIs by providing a different base url.</p>
<p>This is how it looks like now:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'./config'</span>;</div><div class="line"><span class="keyword">import</span> Api <span class="keyword">from</span> <span class="string">'../lib/api'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> api = <span class="keyword">new</span> Api(config.apiUrl);</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> todos = &#123;</div><div class="line">  <span class="attr">list</span>: api.get(<span class="string">'/todos'</span>),</div><div class="line">  <span class="attr">create</span>: api.post(<span class="string">'/todos'</span>)</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> auth = &#123;</div><div class="line">  <span class="attr">login</span>: api.post(<span class="string">'/auth/login'</span>)</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>That is way more maintainable, when someone needs to add a new route it’s way easier than before. Anyone that looks at it knows how to do it.</p>
<hr>
<p><a href="https://medium.com/@rbpinheiro/review-your-code-6e43da2f4aba" target="_blank" rel="external">Review your code</a> was originally published on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;As I finish writing this post, I will review it to check if I can structure it better or if I need to improve the way I am explaining my ideas, and of course for typos and mistakes. This should be the way you write code as well. You are not done when your code works, you are done when your code looks nice.&lt;br&gt;&lt;img src=&quot;/2016/04/08/Review-your-code/code-review.gif&quot; alt=&quot;[Code review]&quot; title=&quot;[Code review]&quot;&gt;&lt;/p&gt;
&lt;p&gt;How many characters in length do you let your lines go? How well do you organise your code? Is your code open to future demands in features or will the team have to rewrite most of it from scratch? Take some pride on how your code looks.&lt;/p&gt;
&lt;p&gt;Other people will see it and you might need to work on it again. When coming back to fix a bug you are not in the same mindset you were when first spending hours or days working on that feature. Review your code to leave it for the future you, so you can read it easily enough.&lt;/p&gt;
&lt;p&gt;By spending some extra time reviewing what you did when your focus was to develop the logic of how things would work and taking care of bugs, you can focus on other important stuff. Did you miss a situation where a bug might show up later? Is your code good enough in case you need to extend it later?&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://skeptical-coder.js.org/tags/javascript/"/>
    
      <category term="good-practices" scheme="http://skeptical-coder.js.org/tags/good-practices/"/>
    
  </entry>
  
  <entry>
    <title>Netflix to save the world</title>
    <link href="http://skeptical-coder.js.org/2015/12/03/Netflix-to-save-the-world/"/>
    <id>http://skeptical-coder.js.org/2015/12/03/Netflix-to-save-the-world/</id>
    <published>2015-12-03T02:18:41.000Z</published>
    <updated>2017-08-06T05:09:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Across history we can see pretty much the same thing happening over and over, a small group controls information and filters what most people should be able to access. Some even change information to produce their own truths. The information that arrives to you has, most likely, already been modified or filtered according to someone else´s point of view or interest.</p>
<figure><img src="https://cdn-images-1.medium.com/max/268/1*uYnOnvHWShl1LFBg2oqbcA.jpeg" alt=""><figcaption>Gutenberg Press</figcaption></figure>

<p>Around 1439 Gutenberg created a machine that would have a large impact on the world and on how information would be distributed. By making knowledge more accessible, Gutenberg´s new printing system created a revolution disrupting the structure of who hold the knowledge, and empowered the renaissance, the protestant reformation, the age of enlightenment and the scientific revolution.</p>
<p>In the 60s, the creation of networks of computers was again the beginning of a new disruptiveness, the internet makes information a lot easier to access and allows disruptive technologies and applications to grow faster. Every now and then something new comes up and causes chaos, Napster did it and was ultimately crushed, taxi apps did it for local taxi companies, Uber did it and caused mayhem on the streets when taxi drivers attacked the black cars.<br><a id="more"></a></p>
<p>If we analyze when things similar happened, we always see that by the end it is beneficial for the larger amount of the population and angers the small amount of people that are greatly benefited by how things work as they were before. We should embrace disruptiveness and force the wheels of power to spin on a different direction.</p>
<figure><img src="https://cdn-images-1.medium.com/max/640/1*DgzQsGqEd6vZtTzduoXmCA.jpeg" alt=""></figure>

<p>The uttermost media for misinformation and manipulation nowadays is television. The programming grid being created by the television companies gives them a huge amount of power to manipulate masses. The next big step we all should take is leave the conventional television industry and adopt content on demand, it´s better for you and it´s better for humanity. You should control what information you are going to consume and when you are going to do that, don’t delegate that to a generic commercial programming grid.<br><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d1d7c3481d13" alt=""></p>
<hr>
<p><a href="https://medium.com/these-fucking-people/netflix-to-save-the-world-d1d7c3481d13" target="_blank" rel="external">Netflix to save the world</a> was originally published in <a href="https://medium.com/these-fucking-people" target="_blank" rel="external">These fucking people</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Across history we can see pretty much the same thing happening over and over, a small group controls information and filters what most people should be able to access. Some even change information to produce their own truths. The information that arrives to you has, most likely, already been modified or filtered according to someone else´s point of view or interest.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/268/1*uYnOnvHWShl1LFBg2oqbcA.jpeg&quot; alt=&quot;&quot;&gt;&lt;figcaption&gt;Gutenberg Press&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Around 1439 Gutenberg created a machine that would have a large impact on the world and on how information would be distributed. By making knowledge more accessible, Gutenberg´s new printing system created a revolution disrupting the structure of who hold the knowledge, and empowered the renaissance, the protestant reformation, the age of enlightenment and the scientific revolution.&lt;/p&gt;
&lt;p&gt;In the 60s, the creation of networks of computers was again the beginning of a new disruptiveness, the internet makes information a lot easier to access and allows disruptive technologies and applications to grow faster. Every now and then something new comes up and causes chaos, Napster did it and was ultimately crushed, taxi apps did it for local taxi companies, Uber did it and caused mayhem on the streets when taxi drivers attacked the black cars.&lt;br&gt;
    
    </summary>
    
    
      <category term="disruptiveness" scheme="http://skeptical-coder.js.org/tags/disruptiveness/"/>
    
      <category term="information" scheme="http://skeptical-coder.js.org/tags/information/"/>
    
      <category term="streaming" scheme="http://skeptical-coder.js.org/tags/streaming/"/>
    
  </entry>
  
  <entry>
    <title>Writing readable code</title>
    <link href="http://skeptical-coder.js.org/2015/11/17/Writing-readable-code/"/>
    <id>http://skeptical-coder.js.org/2015/11/17/Writing-readable-code/</id>
    <published>2015-11-17T19:32:37.000Z</published>
    <updated>2017-08-06T15:44:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>When you are starting on something, be it coding or anything else, more experienced people will give you tips so you can avoid future problems, but many times we will ignore those tips because it doesn’t make sense. Till it does, and you regret not doing it right in the first place while you pull your hair off trying to fix things.</p>
<p>A few years ago I worked on a project that had a few dev teams working together, but each on a different part of the world. A developer from another team was leaving and my team was gonna become responsible for an old software that he was maintaining. Said software was written on a language that I was not used to work with and was using a framework that was long outdated. Fun, right?</p>
<p>I had to look around in the code for where I should work to fulfil my first task. When I found it, I stood there looking at it for a few minutes, probably, without blinking. If this piece of code were a painting, it would be the restored version of Ecce homo.</p>
<p><figure><img src="https://cdn-images-1.medium.com/max/630/1*p1VPeGfOUNzU-P3_lGfztA.jpeg" alt=""><figcaption>Ecce homo</figcaption></figure><br><a id="more"></a></p>
<p>The code, if my memory serves me well, was something like this:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?</span></div><div class="line">$tmp = $application-&gt;prepare2();</div><div class="line"><span class="keyword">if</span> ($tmp[<span class="number">2</span>]) &#123;</div><div class="line">  <span class="comment">// more bad code</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="comment">// even worse code</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>I have no idea of what this code does, you have no idea of what this code does, and about a week after writing it, the developer who wrote it had no idea of what this code does. After a lot of swearing and debugging I was able to finally follow the code and modify what was needed, but if someone did good code in first place, I wouldn’t spend so much time on it.</p>
<p>If you think that writing code is hard, as soon as bug reports or change requests comes you will realise that reading it is much harder, and that you should have spent a few more minutes to do it properly.</p>
<p>Writing readable code will make you write less bugs and fix the existing ones way faster. Here are some tips on how to do it:</p>
<h2 id="Meaningful-names"><a href="#Meaningful-names" class="headerlink" title="Meaningful names"></a>Meaningful names</h2><p>As you can see from the code up there, the names of variable and methods should, at least, give a tip of what is contained inside of them or of what they do. Avoid variables like “tmp”, “str”, “val” and any that does not describe what is contained in them.</p>
<h2 id="Don’t-reuse-variables"><a href="#Don’t-reuse-variables" class="headerlink" title="Don’t reuse variables"></a>Don’t reuse variables</h2><p>Everyone makes the mistake of reusing a variable so they will save memory by not creating a new one or just out of laziness. But that is confusing to whom reads your code, and if you do that inside for loops or some asynchronous code, the chance of you creating a bug are huge.</p>
<h2 id="Declare-variables-at-the-top"><a href="#Declare-variables-at-the-top" class="headerlink" title="Declare variables at the top"></a>Declare variables at the top</h2><p>When all your variables are declared at the top of the function, the developer who reads it will have a pretty good idea of what it does and how it does it. New variables in the middle of the code makes it confusing and more mysterious.</p>
<h2 id="Initialise-variables"><a href="#Initialise-variables" class="headerlink" title="Initialise variables"></a>Initialise variables</h2><p>There is no clearer variable declaration than one with a meaningful name and a default value, specially if your language does not declare the type of the variable explicitly.</p>
<p>Each language treats uninitialised variables differently, causing a different number of bugs on each. You can check the language you work with for potential bugs, or just write better code with initialised variables.</p>
<h2 id="Small-functions"><a href="#Small-functions" class="headerlink" title="Small functions"></a>Small functions</h2><p>Break your code into small functions that does one thing only. It is easier to understand a meaningful function name being called than having to read your whole code to understand it.</p>
<p>Simplicity is the key for understandable code.</p>
<h2 id="Use-return-to-avoid-else"><a href="#Use-return-to-avoid-else" class="headerlink" title="Use return to avoid else"></a>Use return to avoid else</h2><p>You will usually have situations where you should do something if your function argument fits a condition, and do something else if it doesn’t. Giving that your code is divided in small enough functions, you can just do something if that condition is met and return the value inside the if. If the condition is not met your code will continue to execute without the need for an else statement.</p>
<p>That will avoid deeper nesting.</p>
<p>Example:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (x &gt; <span class="number">2</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> x;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Use-proper-indentation"><a href="#Use-proper-indentation" class="headerlink" title="Use proper indentation"></a>Use proper indentation</h2><p>Following the right indentation and the same pattern of indentation over the code will make you eyes scan the code way faster than if you have to check every line for what block of code it belongs.</p>
<h2 id="Avoid-globals"><a href="#Avoid-globals" class="headerlink" title="Avoid globals"></a>Avoid globals</h2><p>Modifying globals will cause side-effects that are not easy to identify, plus you never know the value of that global inside the scope you are currently in.</p>
<h2 id="Pure-functions"><a href="#Pure-functions" class="headerlink" title="Pure functions"></a>Pure functions</h2><p>A function is pure if it does not produce any side-effects and does not depends on external conditions such as global variables. All the input should be given via the function’s arguments, and any number of times you give a pure function the same arguments, it will return the same output. That is possible only if you don’t depend on external conditions. This kind of function is predictable and won’t give you surprises, use them whenever possible.</p>
<h2 id="Don’t-use-shorthands"><a href="#Don’t-use-shorthands" class="headerlink" title="Don’t use shorthands"></a>Don’t use shorthands</h2><p>The most common shorthand used is the if statement without brackets, because your code will fit in the next line. As soon as your code don&#39;t fit in a line, you might insert more lines of code that will seem to be inside the if block, but they aren’t. Even assuming you are testing your changes to the code, on some situations the undesired effect will not show on that specific test, or you will lose some time debugging your code only to feel stupid when you see that you missed some brackets.</p>
<p>This is bad:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (x &gt; <span class="number">2</span>)</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> x;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Return-the-callback"><a href="#Return-the-callback" class="headerlink" title="Return the callback"></a>Return the callback</h2><p>If the language you are using supports first-class functions, meaning that you can send a function as an argument to another function and call it back with the results instead of returning it, always use a return statement to end the function execution there. You avoid that any undesired code gets executed after you finished what you were doing and the syntax highlight of your editor will make the return statement very visible, so you can identify a lot quicker the exit points of your function.</p>
<h2 id="Avoid-loops"><a href="#Avoid-loops" class="headerlink" title="Avoid loops"></a>Avoid loops</h2><p>If your language have minimal support for functional programming, at least supporting the map or foreach functions, prefer using that over for and while loops. If you are creating or modifying an array or object inside a loop, your data will be in different dirty states till it is finished. Plus you will need more auxiliary variables and more accessing of array via index.</p>
<h2 id="Follow-the-project’s-style"><a href="#Follow-the-project’s-style" class="headerlink" title="Follow the project’s style"></a>Follow the project’s style</h2><p>You can argue whether you should include the brackets on the same line or not, whether you should use camel-case or not, whether you use tabs or space for indentation, but you can’t use your own style over the current one for a project you are starting at. Mixed style’s will only lead to confusing code.</p>
<p>Any other tips you think that should have made this list? Don’t agree with any of them?</p>
<hr>
<p><a href="https://medium.com/@rbpinheiro/writing-readable-code-3ef226dfa2" target="_blank" rel="external">Writing readable code</a> was originally published on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;When you are starting on something, be it coding or anything else, more experienced people will give you tips so you can avoid future problems, but many times we will ignore those tips because it doesn’t make sense. Till it does, and you regret not doing it right in the first place while you pull your hair off trying to fix things.&lt;/p&gt;
&lt;p&gt;A few years ago I worked on a project that had a few dev teams working together, but each on a different part of the world. A developer from another team was leaving and my team was gonna become responsible for an old software that he was maintaining. Said software was written on a language that I was not used to work with and was using a framework that was long outdated. Fun, right?&lt;/p&gt;
&lt;p&gt;I had to look around in the code for where I should work to fulfil my first task. When I found it, I stood there looking at it for a few minutes, probably, without blinking. If this piece of code were a painting, it would be the restored version of Ecce homo.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/630/1*p1VPeGfOUNzU-P3_lGfztA.jpeg&quot; alt=&quot;&quot;&gt;&lt;figcaption&gt;Ecce homo&lt;/figcaption&gt;&lt;/figure&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="good-practices" scheme="http://skeptical-coder.js.org/tags/good-practices/"/>
    
      <category term="programming" scheme="http://skeptical-coder.js.org/tags/programming/"/>
    
      <category term="bugs" scheme="http://skeptical-coder.js.org/tags/bugs/"/>
    
  </entry>
  
  <entry>
    <title>Why I am an atheist</title>
    <link href="http://skeptical-coder.js.org/2015/11/14/Why-I-am-an-atheist/"/>
    <id>http://skeptical-coder.js.org/2015/11/14/Why-I-am-an-atheist/</id>
    <published>2015-11-14T22:38:30.000Z</published>
    <updated>2017-08-06T04:57:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>No, I am not going into whether god exists or not. Maybe the title should have something to do with humanism instead of atheism, but I really wanna focus on how religion never made sense to me and pushed me away from it.</p>
<figure><img src="https://cdn-images-1.medium.com/max/500/1*jz9Jt1_mNoVn1RNhNm3GLQ.jpeg" alt=""></figure>

<p>I know religion can be really important for some people, and that it helped many people in times of distress. But that is pretty much where the benefits ends and mayhem starts. Many might have a healthy relationship with religion and church, but that is not the reality of most.</p>
<p>From now on I will use the word church as a general idea of who dictates the rules for religions, I am not going to go into specific details of different religions. But I am going into their influence on history and everyday life.<br><a id="more"></a></p>
<p>The main social issues that causes, or caused along history, prejudice, deaths or that slowed down our evolution as human beings are racism, male chauvinism, homophobia, transphobia and poor educational systems. I am sure there are more that I am missing, but just think on how the church influenced on each of the items on that list.</p>
<p>The uttermost form of racism is slavery. Subjugating a whole race or nation was stated as a right on the bible long ago, glad that God decided to remove that part. But the remaining effect of prejudice from slavery times is still very present and is not disappearing any time soon. Using Louis C.K.`s words, it was not a clean shit that you don’t have to wipe.</p>
<p>Feminism is very strong nowadays, and thank God for that (see what I did there?), because women have been having their dreams, opinions and lives crushed and dictated by men and society for far too long. I am sure that a story about how women were created from men and to serve men does not help with that. A book that says that women should learn quietly with all submissiveness and that they should not teach or exercise authority over a man is surely not going to be on my shelve. Neither will I listen to someone that says that women should cover their whole bodies, head included, so they will not receive flattery or give men, other than her husband, sexual thoughts. As if what other people think or do is her sole responsibility.</p>
<p>If you live by rules that forbid you of laying with someone of the same sex, don’t do it. But do not enforce that on laws for everyone else that don’t really care for your proslavery, chauvinist and homophobic book. People lay with people of the same sex and that gives them happiness and joy, other people discriminate them and push them to the edge of society causing suffering and deaths. Who should I choose to support? Happiness and joy or suffering and death?</p>
<p>The earth is not the centre of the universe, the world is round(ish), there is something beyond the sky we see, we should open the human body to study it, that was all heresy and who had a different opinion should be punished. Till it is well proven and it helps people, then the church says “sorry” to all those thinkers and scientists. Humanity has a limit of how fast it is able to evolve it’s knowledge, and it doesn’t help to have the church slowing it down even more.</p>
<p>For a long time the church was one of the biggest voices on defining the laws of society, those times are known as the dark ages, and they are known like that for a good reason. We never had times where we evolved so slowly and caused so many deaths and violence for foolish reasons.</p>
<p>Later we have something called the enlightenment, and thoughts prevailed over god-given commands that we should follow sheeply without questions. We once again began to rise as better human beings and expand our knowledge on a much faster pace.</p>
<p>Once and again the news shows us attacks or wars that are driven by some religion. I believe that as long as we have strong religious leaderships we will have wars and prejudice. History shows us that and I am not foolish enough to doubt history.</p>
<p>If you usually go to the church or to any place of prayer, think of who are the sinners that you are most distant to and understand the least. Are they gay people, people from another religion, people that have no religion? Grab a chair and sit to talk and understand why they are the way they are, maybe they are not that different from you.<br><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=89d91dde4dd0" alt=""></p>
<hr>
<p><a href="https://medium.com/these-fucking-people/why-i-am-an-atheist-89d91dde4dd0" target="_blank" rel="external">Why I am an atheist</a> was originally published in <a href="https://medium.com/these-fucking-people" target="_blank" rel="external">These fucking people</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;No, I am not going into whether god exists or not. Maybe the title should have something to do with humanism instead of atheism, but I really wanna focus on how religion never made sense to me and pushed me away from it.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/500/1*jz9Jt1_mNoVn1RNhNm3GLQ.jpeg&quot; alt=&quot;&quot;&gt;&lt;/figure&gt;

&lt;p&gt;I know religion can be really important for some people, and that it helped many people in times of distress. But that is pretty much where the benefits ends and mayhem starts. Many might have a healthy relationship with religion and church, but that is not the reality of most.&lt;/p&gt;
&lt;p&gt;From now on I will use the word church as a general idea of who dictates the rules for religions, I am not going to go into specific details of different religions. But I am going into their influence on history and everyday life.&lt;br&gt;
    
    </summary>
    
    
      <category term="religion" scheme="http://skeptical-coder.js.org/tags/religion/"/>
    
      <category term="atheism" scheme="http://skeptical-coder.js.org/tags/atheism/"/>
    
      <category term="humanism" scheme="http://skeptical-coder.js.org/tags/humanism/"/>
    
  </entry>
  
  <entry>
    <title>Would you tell me, please, which way I ought to go from here?</title>
    <link href="http://skeptical-coder.js.org/2015/11/11/Would-you-tell-me-please-which-way-I-ought-to-go-from-here/"/>
    <id>http://skeptical-coder.js.org/2015/11/11/Would-you-tell-me-please-which-way-I-ought-to-go-from-here/</id>
    <published>2015-11-11T15:09:46.000Z</published>
    <updated>2017-08-06T16:04:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>More than once someone asked me what they should be learning next. Which isn’t an odd question, specially, if you are a software developer or aspiring to be one. Software development is like a sandbox, and people from everywhere are creating new and exciting things faster than anyone can learn them. New frameworks, technologies and methodologies are invented, recycled and reapplied every day in a lot of different ways and for different purposes.</p>
<p>The last word from the previous paragraph is actually the keyword for answering this question that torments quite a few of my fellow developers. Unfortunately I don’t really have an answer for you, but I can help you find it.</p>
<p>And now for something completely different…</p>
<blockquote>
<p>“Would you tell me, please, which way I ought to go from here?”<br>“That depends a good deal on where you want to get to,” said the Cat.<br>“I don’t much care where–” said Alice.<br>“Then it doesn’t matter which way you go,” said the Cat.<br>“–so long as I get SOMEWHERE,” Alice added as an explanation.<br>“Oh, you’re sure to do that,” said the Cat, “if you only walk long enough.”<br><a id="more"></a></p>
</blockquote>
<p>What you just read is a piece of Alice in Wonderland, and if you ask me for directions of where you should be going next I am gonna tell you that it depends a great deal on where you want to get to. If you have not decided yet, it doesn’t matter, but don’t stop learning. Keep learning long enough and you will get somewhere.</p>
<p>By learning new things you will eventually find out where you want to go, that is when you are ready to find a real answer to that question. Once you know where you wanna get, you will be able to see a lot better what you need to learn and which road you should take.</p>
<p>If you are able to pin down what kind of company you want to work for, just go through their open positions and make a list of what they expect developers to know. If you want to dedicate your career as a researcher for an specific area, find out what languages and tools are being used on that specific field.</p>
<p>As a final tip, to really get to your objectives, learn and prove that you can work on what you want before you are given the chance. It surely is nice to show a nice diploma on a job interview and that might impress potential hirers, but if you have developed something on their area, even if it’s a small personal project, it might impress them even more and make of you a safer bet than that guy from the best university but that haven’t dedicated his time for what they are looking for.</p>
<hr>
<p><a href="https://medium.com/@rbpinheiro/would-you-tell-me-please-which-way-i-ought-to-go-from-here-2985ef3f503e" target="_blank" rel="external">Would you tell me, please, which way I ought to go from here?</a> was originally published on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;More than once someone asked me what they should be learning next. Which isn’t an odd question, specially, if you are a software developer or aspiring to be one. Software development is like a sandbox, and people from everywhere are creating new and exciting things faster than anyone can learn them. New frameworks, technologies and methodologies are invented, recycled and reapplied every day in a lot of different ways and for different purposes.&lt;/p&gt;
&lt;p&gt;The last word from the previous paragraph is actually the keyword for answering this question that torments quite a few of my fellow developers. Unfortunately I don’t really have an answer for you, but I can help you find it.&lt;/p&gt;
&lt;p&gt;And now for something completely different…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Would you tell me, please, which way I ought to go from here?”&lt;br&gt;“That depends a good deal on where you want to get to,” said the Cat.&lt;br&gt;“I don’t much care where–” said Alice.&lt;br&gt;“Then it doesn’t matter which way you go,” said the Cat.&lt;br&gt;“–so long as I get SOMEWHERE,” Alice added as an explanation.&lt;br&gt;“Oh, you’re sure to do that,” said the Cat, “if you only walk long enough.”&lt;br&gt;
    
    </summary>
    
    
      <category term="learning" scheme="http://skeptical-coder.js.org/tags/learning/"/>
    
      <category term="career-advice" scheme="http://skeptical-coder.js.org/tags/career-advice/"/>
    
      <category term="software-development" scheme="http://skeptical-coder.js.org/tags/software-development/"/>
    
  </entry>
  
</feed>
